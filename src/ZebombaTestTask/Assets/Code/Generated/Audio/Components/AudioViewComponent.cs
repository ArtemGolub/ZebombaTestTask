//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class AudioMatcher {

    static Entitas.IMatcher<AudioEntity> _matcherView;

    public static Entitas.IMatcher<AudioEntity> View {
        get {
            if (_matcherView == null) {
                var matcher = (Entitas.Matcher<AudioEntity>)Entitas.Matcher<AudioEntity>.AllOf(AudioComponentsLookup.View);
                matcher.componentNames = AudioComponentsLookup.componentNames;
                _matcherView = matcher;
            }

            return _matcherView;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class AudioEntity {

    public Code.Audios.Audio.View view { get { return (Code.Audios.Audio.View)GetComponent(AudioComponentsLookup.View); } }
    public Code.Infrastructure.Views.AudioViews.IEntityAudioView View { get { return view.Value; } }
    public bool hasView { get { return HasComponent(AudioComponentsLookup.View); } }

    public AudioEntity AddView(Code.Infrastructure.Views.AudioViews.IEntityAudioView newValue) {
        var index = AudioComponentsLookup.View;
        var component = (Code.Audios.Audio.View)CreateComponent(index, typeof(Code.Audios.Audio.View));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public AudioEntity ReplaceView(Code.Infrastructure.Views.AudioViews.IEntityAudioView newValue) {
        var index = AudioComponentsLookup.View;
        var component = (Code.Audios.Audio.View)CreateComponent(index, typeof(Code.Audios.Audio.View));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public AudioEntity RemoveView() {
        RemoveComponent(AudioComponentsLookup.View);
        return this;
    }
}
